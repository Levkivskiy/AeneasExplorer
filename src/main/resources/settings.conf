scorex {
  dataDir = ".blockchain/data"
  dataDir = ${?DATADIR}

  logDir = ".blockchain/log"
  logDir = ${?LOGDIR}

  restApi {
    # Network address to bind to
    bindAddress = "127.0.0.1:6686"
    bindAddress = ${?RESTAPIADDR}

    # Hash of API key string
    #apiKeyHash = ""

    # Enable/disable CORS support.
    corsAllowedOrigin = "*"

    # request processing timeout
    timeout = 5s
  }

  api {
    bindAddress = "127.0.0.1:19085"
    bindAddress = ${?APIADDR}
    keyPath = "key/server.p12"
    keyPath = ${?PKCS12KEY}
    keyPwd = "123456"
    keyPwd = ${?PKCS12PWD}
    //api-key-hash = ""
  }

  static {
    staticFilesDir = "./"
    staticFilesDir = ${?STATICDIR}
  }

  seedGen {
    passPhraseSize = 24//2//15 or 24 preffered
    file = "words.csv"
    file = ${?WORDSDICT}
  }

  network {
    # Current node name
    nodeName = "Fullnode"
    nodeName = ${?NODENAME}

    # Network adderess
    bindAddress = "127.0.0.1:19088"
    bindAddress = ${?NETADDR}

    # List of IP addresses of well known nodes.
    knownPeers = ["127.0.0.1:9089", "51.15.226.190:8995", ${?KNOWNPEER}]//TODO search peers

    # Node name in network
    agentName = "Aeneas"
    agentName = ${?AGENTNAME}

    networkChunkSize = 10

    # Accept only local connections
    localOnly = false

    # Number of network connections
    maxConnections = 30

    # Network connection timeout
    connectionTimeout = 15s

    # Enable UPnP tunnel creation only if you router/gateway supports it. Useful if your node is runnin in home
    # network. Completely useless if you node is in cloud.
    upnpEnabled = no

    # UPnP timeouts
    # upnp-gateway-timeout = 7s
    # upnp-discover-timeout = 3s

    # Network handshake timeout
    handshakeTimeout = 3s

    # Network delivery timeout
    deliveryTimeout = 15s
    maxDeliveryChecks = 5

    # Network version send in handshake
    appVersion = 0.0.1

    # Maximum income package size
    maxPacketLen = 2621440

    # Accept maximum inv objects
    maxInvObjects = 500

    # Synchronization interval
    syncInterval = 15s

    # Synchronization intblerval for stable regime
    syncIntervalStable = 20s

    # Synchronization timeout
    syncTimeout = 5s

    # Synchronization status update interval
    syncStatusRefresh = 2m

    # Synchronization status update interval for stable regime
    syncStatusRefreshStable = 4m

    # Network controller timeout
    controllerTimeout = 15s

  }

  ntp {
    # NTP server address
    server = "0.pool.ntp.org"

    # update time rate
    updateEvery = 30m

    # server answer timeout
    timeout = 60s
  }

  miner {
    offlineGen = true
    blockGenDelay = 57s
    initialDifficulty = 1
    minHashLiterals = 2
  }

  wallet {
    seed = "aeneas"
    password = "scorex"
    walletDir = ".blockchain/wallet"
    walletDir = ${?WALLETDIR}
  }
}

akka.actor {
//  default-mailbox {
//    mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
//  }
  default-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    throughput = 100
    fork-join-executor {
      parallelism-min = 4
      parallelism-max = 10
      parallelism-factor = 4.0

    }
  }
}
# NETADDR="127.0.0.1:9089" SECONDPEER="127.0.0.1:9088 127.0.0.1:9090" WALLETDIR=".blockchain/wallet2" DATADIR=".blockchain/data2" LOGDIR=".blockchain/log2" sbt run
# NETADDR="127.0.0.1:9090" SECONDPEER="127.0.0.1:9088 127.0.0.1:9089" WALLETDIR=".blockchain/wallet3" DATADIR=".blockchain/data3" LOGDIR=".blockchain/log3" sbt run

# RESTAPIADDR="127.0.0.1:6684" NETADDR="127.0.0.1:9089" SECONDPEER="127.0.0.1:9088" WALLETDIR=".blockchain/wallet2" DATADIR=".blockchain/data2"
# LOGDIR=".blockchain/log2" NODENAME="Fullnode" sbt run
